.header {
  background-color: $color-grey-dark-1;
  grid-column: full-start/col-end 6;

  background-image: linear-gradient(
      rgba($color-secondary, 0.93),
      rgba($color-secondary, 0.93)
    ),
    url("../img/hero.jpeg");
  background-size: cover;
  background-position: center;
  padding: 8rem;
  padding-top: 4rem;

  display: grid;
  grid-template-rows: 1fr min-content minmax(6rem, min-content) 1fr; // this structure can create spacing similar to a flex box. We are using the grid-gap instead of using flex box.
  // the minmax function is used here to create media queries so that the text folds over.
  grid-template-columns: minmax(
    min-content,
    max-content
  ); // this sets the width of the column so that the column is never smaller than the content.

  grid-row-gap: 1.5rem;
  justify-content: center; // centers the column with in the grid.

  @media only screen and (max-width: $bp-medium) {
    grid-column: 1 / -1;
  }

  &__logo {
    height: 3rem;
    justify-self: center;
  }

  &__btn {
    align-self: flex-start; // moves it left
    justify-self: start; // moves it to the top
    /// this stops the button from taking all the availabel space in the grid.
  }

  &__seenon-text {
    // even text can be treated as a grid item.
    // the line is created as one before element and one after element.
    display: grid;
    grid-template-columns: 1fr max-content 1fr;
    grid-column-gap: 1.5rem;
    align-items: center;

    font-size: 1.6rem;
    color: $color-grey-light-2;

    &::before,
    &::after {
      content: "";
      height: 1px;
      display: block;
      background-color: currentColor;
    }
  }

  &__seenon-logo {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-column-gap: 3rem;
    justify-items: center;
    align-items: center;
    img {
      max-height: 2.5rem;
      max-width: 100%;
      filter: brightness(70%);
    }
  }
}
